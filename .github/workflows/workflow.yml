name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v2

      - name: Configurar JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Construir con Maven
        run: mvn clean package

      - name: Ejecutar pruebas unitarias
        run: mvn test

      - name: Generar reporte de cobertura con Jacoco
        run: mvn jacoco:report

      - name: Subir reporte de cobertura como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: reporte-cobertura
          path: target/site/jacoco

  security_analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v2

      - name: Configurar JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Ejecutar OWASP Dependency Check
        run: mvn org.owasp:dependency-check-maven:check

      - name: Subir reporte de OWASP Dependency Check
        uses: actions/upload-artifact@v4
        with:
          name: reporte-dependencias
          path: target/dependency-check-report.html

  static_analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v2

      - name: Ejecutar an치lisis est치tico con SpotBugs
        run: mvn com.github.spotbugs:spotbugs-maven-plugin:check

      - name: Subir reporte de SpotBugs
        uses: actions/upload-artifact@v4
        with:
          name: reporte-spotbugs
          path: target/spotbugs.xml

  formatting_check:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v2

      - name: Verificar formato de c칩digo con Checkstyle
        run: mvn checkstyle:check

      - name: Subir reporte de Checkstyle
        uses: actions/upload-artifact@v4
        with:
          name: reporte-checkstyle
          path: target/site/checkstyle.html

  performance_test:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v2

      - name: Ejecutar pruebas de rendimiento con JMH
        run: mvn clean install && mvn jmh:benchmark

      - name: Subir reporte de rendimiento
        uses: actions/upload-artifact@v4
        with:
          name: reporte-jmh
          path: target/jmh-report.txt

  sonar_analysis:
    runs-on: ubuntu-latest
    needs: [build_and_test, security_analysis, static_analysis, formatting_check, performance_test]

    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v2

      - name: Configurar JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Instalar Sonar Scanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          mv sonar-scanner-5.0.1.3006-linux sonar-scanner
          echo "PATH=$PATH:$(pwd)/sonar-scanner/bin" >> $GITHUB_ENV

      - name: Analizar c칩digo en SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.MAIN_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=SQLInjectionTest \
            -Dsonar.host.url=https://76e4-31-4-242-171.ngrok-free.app \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.sources=app.py \
            -Dsonar.qualitygate.wait=true \
            -X
