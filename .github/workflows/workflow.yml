name: CI - Java & Python Build and Test

on:
  push:
    branches:
      - main
      - dev
      - feature

env: # Variables de entorno
  SONAR_TOKEN: ${{ secrets.MAIN_TOKEN }} # Token for main branch

jobs:
  build-test:
    runs-on: ubuntu-latest

    env:
      JAVA_SRC: src/com/example/sqlinjectiontest
      PYTHON_DIR: python
      RESULTS_DIR: results

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    # ------------ JAVA BUILD & TEST ------------
    - name: ‚òï Set up JDK 17 # Instala y configura Java TEMURIN
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: ‚òï Setting JDK 17... # Instala y configura Java ZULU
      uses: actions/setup-java@v2
      with:
        java-version: '17' 
        distribution: 'zulu'

    - name: üõ†Ô∏è Compile Java code
      run: |
        mkdir -p ${{ env.RESULTS_DIR }}/java
        javac ${{ env.JAVA_SRC }}/Main.java -d ${{ env.RESULTS_DIR }}/java/

    - name: üöÄ Run Java main (if it has a main method)
      run: |
        cd ${{ env.RESULTS_DIR }}/java
        java com.example.sqlinjectiontest.Main | tee ../../${{ env.RESULTS_DIR }}/java/java-output.txt || true

    # ------------ PYTHON TESTS ------------
    - name: üêç Python config. # Instala y configura Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: üì¶ Install dependencies for Python # Instala las librerias de Python a usar
      run: |
        pip install pytest flake8 bandit black

    - name: üß™ Run pytests # Ejecuta los pytests
      run: |
        pytest -s -v --disable-warnings python/file.py
      continue-on-error: true
      
    # ------------ ARTIFACTS ------------
    - name: üìÅ Upload test results # Almacena los resultados de las pruebas
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: results/

    # ------------ SUMMARY ------------
    - name: üìã Summary # Resumen de las tareas de Java y Python
      run: |
        echo "‚úÖ Java and Python tasks completed."
        echo "üìÑ Outputs stored in 'results/' and uploaded as artifacts."


    - name: üì¶ Install Sonar Scanner
      run: |
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
        unzip sonar-scanner-cli-5.0.1.3006-linux.zip
        mv sonar-scanner-5.0.1.3006-linux sonar-scanner
        echo "$(pwd)/sonar-scanner/bin" >> $GITHUB_PATH

    - name: ‚òëÔ∏è Verify SonarQube...
      run: |
        curl -I http://rnghg-31-4-242-208.a.free.pinggy.link || true

    - name: ‚ñ∂Ô∏è Run SonarQube scan
      run: |
        sonar-scanner \
          -Dsonar.projectKey=VariosTests \
          -Dsonar.host.url=http://rnghg-31-4-242-208.a.free.pinggy.link \
          -Dsonar.token=${{ secrets.MAIN_TOKEN }} \
          -Dsonar.sources=python,src \
          -Dsonar.python.version=3.x \
          -Dsonar.qualitygate.wait=true \
          -X
    # ------------ OPTIONAL: Docker (commented) ------------
    # - name: üê≥ Run docker-compose (optional)
    #   run: docker-compose up -d
