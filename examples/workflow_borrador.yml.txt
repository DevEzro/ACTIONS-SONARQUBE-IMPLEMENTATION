#----------------------DOCKER URL--------------------------
name: SQL INJECTION TEST

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonar_analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Clonando repositorio...
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Configurar JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Instalando Sonar Scanner...
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          mv sonar-scanner-5.0.1.3006-linux sonar-scanner
          echo "PATH=$PATH:$(pwd)/sonar-scanner/bin" >> $GITHUB_ENV

      - name: Verificar SonarQube
        run: |
          curl -I http://localhost:9000
        continue-on-error: true

      - name: Analizar con SonarQube...
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=SQLInjectionTest \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.sources=src/Main.java \
            -Dsonar.qualitygate.wait=true \
            -X
            
      - name: Verificar Quality Gate...
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          status=$(curl -s -u $SONAR_TOKEN: "http://80.32.55.61:9000/api/qualitygates/project_status?projectKey=SQLInjectionTest" | jq -r .projectStatus.status)
          if [ "$status" != "OK" ]; then
            echo "Quality Gate failed: $status"
            echo "View details on http://80.32.55.61:9000/dashboard?id=SQLInjectionTest"
            exit 1
          else
            echo "Quality Gate passed: $status"
          fi
          
  # revert_commit:
  #   runs-on: ubuntu-latest
  #   needs: sonar_analysis
  #   if: failure()
  #   steps:
  #     - name: Clonando repositorio...
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #         token: ${{ secrets.THE_TOKEN }}

  #     - name: Configurar identidad de Git
  #       run: |
  #         git config --global user.email "davidtestout@outlook.com"
  #         git config --global user.name "DevEzro"

  #     - name: Verificar commit y revertir
  #       id: check_revert
  #       run: |
  #         if git log -1 --pretty=%B | grep -q "Revert commit due to SonarQube analysis failure"; then
  #           echo "Revert commit detected, skipping revert."
  #           exit 0
  #         else
  #           git reset --hard HEAD~1
  #           git push --force origin main
  #         fi
          
#----------------------IP PÚBLICA--------------------------
# name: GitHub Actions con SonarQube y Flask

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Clonando repositorio...
#         uses: actions/checkout@v2

#       - name: Instalando Python...
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.9'

#       - name: Instalando dependencias...
#         run: |
#           pip install --upgrade pip
#           python -m venv venv
#           source venv/bin/activate
#           pip install flask

#       - name: Ejecutar Flask...
#         run: |
#           source venv/bin/activate
#           export FLASK_APP=hello.py
#           export FLASK_ENV=development
#           flask run &

#       - name: Instalando Sonar Scanner...
#         run: |
#           wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
#           unzip sonar-scanner-cli-5.0.1.3006-linux.zip
#           mv sonar-scanner-5.0.1.3006-linux sonar-scanner
#           echo "PATH=$PATH:$(pwd)/sonar-scanner/bin" >> $GITHUB_ENV

#       # - name: Verificar SonarQube
#       #   run: |
#       #     curl -I http://192.168.0.14:9000
#       #   continue-on-error: true

#       - name: Analizar con SonarQube...
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         run: |
#           sonar-scanner \
#             -Dsonar.projectKey=FlaskTest \
#             -Dsonar.host.url=http://192.168.0.14:9000 \
#             -Dsonar.login=$SONAR_TOKEN \
#             -Dsonar.sources=hello.py \
#             -Dsonar.exclusions="**/venv/**,**/*.pyc,**/__pycache__/**" \
#             -X


#----------------------NGROK--------------------------
# name: NGROK GitHub Actions w/ SonarQube # and Semgrep

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Clonando repositorio...
#         uses: actions/checkout@v2

#       - name: Preparando JDK 17...
#         uses: actions/setup-java@v2
#         with:
#           java-version: '17'
#           distribution: 'zulu'

#       # - name: Instalando Semgrep...
#       #   run: |
#       #     pip install semgrep

#       # # Ejecutar análisis con Semgrep
#       # - name: Run Semgrep
#       #   run: |
#       #     semgrep --config=p/java --include="**/*.java" .

#       - name: Instalando Sonar Scanner...
#         run: |
#           wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
#           unzip sonar-scanner-cli-5.0.1.3006-linux.zip
#           mv sonar-scanner-5.0.1.3006-linux sonar-scanner
#           echo "PATH=$PATH:$(pwd)/sonar-scanner/bin" >> $GITHUB_ENV
#       - name: Analizando con SonarQube...
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         run: |
#           sonar-scanner \
#             -Dsonar.projectKey=GitHubActionsSonarQubeProj \
#             -Dsonar.host.url=https://df03-77-231-97-190.ngrok-free.app \
#             -Dsonar.login=$SONAR_TOKEN \
#             -Dsonar.sources=hello.py \
#             -Dsonar.exclusions="**/venv/**,**/*.pyc,**/__pycache__/**" \
#             -X 